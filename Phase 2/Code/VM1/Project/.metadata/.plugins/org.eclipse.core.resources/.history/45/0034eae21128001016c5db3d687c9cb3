import java.io.*;
import java.net.*;

public class ClientHandler extends Thread {
    private Socket clientSocket;
    private String clientName;

    public ClientHandler(Socket socket) {
        this.clientSocket = socket;
    }

    @Override
    public void run() {
        try {
            BufferedReader from_client = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            // Wrap PrintWriter with ReformattingPrintWriter to handle all responses
            PrintWriter to_client = new ReformattingPrintWriter(new PrintWriter(clientSocket.getOutputStream(), true));

            String input;
            while ((input = from_client.readLine()) != null) {
                try {
                    String[] parts = input.split(";");
                    if (parts[0].equals("REQUEST_TASK") && parts.length == 4) {
                        clientName = parts[2];
                        int serviceNumber = Integer.parseInt(parts[1]);
                        int priority = Integer.parseInt(parts[3]);
                        String response = Server.addTask(serviceNumber, clientName, priority, clientSocket);
                        to_client.println(response); // Will be reformatted by ReformattingPrintWriter
                    } else if (parts[0].equals("QUEUE_STATUS")) {
                        String response = Server.getQueueStatus();
                        to_client.println(response);
                    } else if (parts[0].equals("CANCEL_TASK") && parts.length == 3) {
                        if (clientName == null) {
                            to_client.println("REJECTED;" + java.time.LocalDateTime.now() + ";Client name not set.");
                            continue;
                        }
                        int taskId = Integer.parseInt(parts[1]);
                        String response = Server.cancelTask(taskId, parts[2]);
                        to_client.println(response);
                    } else if (parts[0].equals("TASK_HISTORY")) {
                        String response = Server.getTaskHistory();
                        to_client.println(response);
                    } else {
                        to_client.println("REJECTED;" + java.time.LocalDateTime.now() + ";Invalid command.");
                    }
                } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {
                    to_client.println("REJECTED;" + java.time.LocalDateTime.now() + ";Invalid command format.");
                }
            }
        } catch (IOException e) {
            System.out.println("Error handling client: " + e.getMessage());
        } finally {
            try {
                clientSocket.close();
            } catch (IOException e) {
                System.out.println("Error closing client socket: " + e.getMessage());
            }
        }
    }

    private static class ReformattingPrintWriter extends PrintWriter {
        public ReformattingPrintWriter(PrintWriter out) {
            super(out);
        }

        @Override
        public void println(String response) {
            String reformatted = reformatResponse(response);
            super.println(reformatted);
        }

        private String reformatResponse(String response) {
            String[] parts = response.split(";", 3);
            if (parts.length < 3 || !parts[0].equals("STATUS")) {
                // If response is already in correct format or invalid, return as-is
                return response;
            }
            String timestamp = parts[1];
            String message = parts[2];
            // Extract actual status and message (e.g., "EXECUTING: TaskID 1 has started execution." -> "EXECUTING" and "TaskID 1 has started execution.")
            String[] messageParts = message.split(":", 2);
            if (messageParts.length != 2) {
                // Fallback: treat entire message as message with REJECTED status
                return "REJECTED;" + timestamp + ";" + message;
            }
            String actualStatus = messageParts[0].trim();
            String actualMessage = messageParts[1].trim();
            // Validate status
            if (!actualStatus.equals("QUEUED") && !actualStatus.equals("EXECUTING") && !actualStatus.equals("COMPLETED") && 
                !actualStatus.equals("REJECTED") && !actualStatus.equals("ERROR")) {
                return "REJECTED;" + timestamp + ";Unknown status: " + actualStatus;
            }
            return actualStatus + ";" + timestamp + ";" + actualMessage;
        }
    }
}