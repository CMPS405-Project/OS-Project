import java.io.*;
import java.net.*;
import java.util.ArrayList;

public class NetworkService extends Thread {
    // Update this path to match where your script actually is!
    String script = "/home/vm1_server/CMPS405_Project/VM1_Server/Task5/Network.sh";  // script location
    InetAddress client1ip;
    InetAddress client2ip;
    BufferedReader terminalReader = null;
    private ArrayList<Socket> clientSockets;
    
    public NetworkService(InetAddress client1ip, InetAddress client2ip, ArrayList<Socket> sockets) {
        super();
        this.client1ip = client1ip;
        this.client2ip = client2ip;
        this.clientSockets = sockets;
    }
    
    public void run() {
        try {
            // Debug information
            System.out.println("Starting NetworkService thread");
            System.out.println("Script path: " + script);
            System.out.println("Client1 IP: " + client1ip.getHostAddress());
            System.out.println("Client2 IP: " + client2ip.getHostAddress());
            
            // this will execute the command so it will build this: bash /path/to/script.sh client1IP client2IP
            ProcessBuilder processBuilder = new ProcessBuilder(
                "bash", 
                script, 
                client1ip.getHostAddress(), 
                client2ip.getHostAddress()
            );
            
            // Allow the standard output and standard error to be merged in one stream
            processBuilder.redirectErrorStream(true);
            
            // Run the script, create a child process and return it
            System.out.println("Executing shell script...");
            Process NetworkTest = processBuilder.start();
            
            // Read from the process output stream
            terminalReader = new BufferedReader(new InputStreamReader(NetworkTest.getInputStream()));
            
            String terminalOutput;
            while ((terminalOutput = terminalReader.readLine()) != null) {
                System.out.println(terminalOutput);  // read and print each line from the script output
            }
            
            // Wait for the shell script process to complete
            System.out.println("Waiting for script to complete...");
            NetworkTest.waitFor();
            System.out.println("Script execution completed");
            
            // Close all client sockets after script completes
            for (Socket socket : clientSockets) {
                try {
                    if (socket != null && !socket.isClosed()) {
                        System.out.println("Closing connection to client: " + socket.getInetAddress().getHostAddress());
                        socket.close();
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        } catch (Exception e) {
            System.out.println("Error in NetworkService:");
            e.printStackTrace();
        } finally {
            try {
                if (terminalReader != null)
                    terminalReader.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}