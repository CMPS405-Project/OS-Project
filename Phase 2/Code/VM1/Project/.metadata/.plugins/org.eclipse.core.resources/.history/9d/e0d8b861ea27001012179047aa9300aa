import java.io.*;
import java.net.*;

public class NetworkServiceThread extends Thread {
    private static final String SCRIPT = "/home/vm1_server/CMPS405_Project/VM1_Server/Task5/Network.sh"; // MODIFIED: Made constant
    private InetAddress client1ip;
    private InetAddress client2ip;

    public NetworkServiceThread(InetAddress client1ip, InetAddress client2ip, ArrayList<Socket> sockets) {
        super();
        this.client1ip = client1ip;
        this.client2ip = client2ip;
        // FIXED: Removed unused clientSockets
    }

    public void run() {
        BufferedReader terminalReader = null;
        try {
            System.out.println("Starting NetworkService thread");
            System.out.println("Script path: " + SCRIPT);
            System.out.println("Client1 IP: " + client1ip.getHostAddress());
            System.out.println("Client2 IP: " + client2ip.getHostAddress());

            ProcessBuilder processBuilder = new ProcessBuilder("bash", SCRIPT, client1ip.getHostAddress(), client2ip.getHostAddress());
            processBuilder.redirectErrorStream(true);

            System.out.println("Executing shell script...");
            Process networkTest = processBuilder.start();

            terminalReader = new BufferedReader(new InputStreamReader(networkTest.getInputStream()));
            String terminalOutput;
            while ((terminalOutput = terminalReader.readLine()) != null) {
                System.out.println(terminalOutput);
            }

            int exitCode = networkTest.waitFor();
            System.out.println("Network.sh Script execution completed with exit code: " + exitCode);

            if (exitCode != 0) {
                System.out.println("Network.sh failed with exit code: " + exitCode);
                // FIXED: Log error (clients are notified via ClientHandler)
            }
        } catch (IOException | InterruptedException e) {
            System.out.println("Error in NetworkService: " + e.getMessage());
        } finally {
            if (terminalReader != null) {
                try {
                    terminalReader.close();
                } catch (IOException e) {
                    System.out.println("Error closing terminal reader: " + e.getMessage());
                }
            }
        }
    }
}